# Config for multi-device full DPO alignment in full_dpo_distributed.py
# using a Llama3.1 8B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-3.3-70B-Instruct --output-dir /tmp/Llama-3.3-70B-Instruct --ignore-patterns "original/consolidated.00.pth"
#
# To launch on 8 devices, run the following command from root:
#   tune run --nnodes 1 --nproc_per_node 8 full_dpo_distributed.py --config dpo_config.yaml

# TODO: Change for Llama 3.3 70B
model_size: "70B"
model_version: "3.3"
# model_size: "3B"
# model_version: "3.2"
base_model_name: Llama-${model_version}-${model_size}-Instruct

base_dir: /tmp/${base_model_name}
output_dir: /tmp/torchtune/${base_model_name}/full_dpo # /tmp may be deleted by your system. Change it to your preference.

model:
  # TODO: Change for Llama 3.3 70B
  # _component_: torchtune.models.llama3_2.llama3_2_3b
  _component_: torchtune.models.llama3_3.llama3_3_70b

tensor_parallel_dim: 2
tensor_parallel_plan:
  _component_: torchtune.models.llama3.base_llama_tp_plan

tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: ${base_dir}/original/tokenizer.model
  max_seq_len: 1024 # higher increases memory

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${base_dir}
  checkpoint_files:
    filename_format: model-{}-of-{}.safetensors
    # TODO: Change for Llama 3.3 70B
    max_filename: "00030"
    # max_filename: "00002"
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3
resume_from_checkpoint: False

# The ref_checkpointer should always point to the original weights.
ref_checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${base_dir}
  checkpoint_files:
    filename_format: model-{}-of-{}.safetensors
    # TODO: Change for Llama 3.3 70B
    max_filename: "00030"
    # max_filename: "00002"
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.stack_exchange_paired_dataset
  split: "train[:100000]"
seed: null
shuffle: True
batch_size: 4

huggingface:
  repo_id: meta-llama/${base_model_name}
  allow_patterns:
    - "*.safetensors"
    - "*.json"
    - "original/tokenizer.*"

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: False # Tensor parallel requires device mesh, which is not supported by Fused AdamW.
  weight_decay: 0.05
  lr: 1e-5
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 20

loss:
  _component_: torchtune.rlhf.loss.DPOLoss
  beta: 0.05
  label_smoothing: 0

# Training
epochs: 1
max_steps_per_epoch: 50
gradient_accumulation_steps: 1  # Use to increase effective batch size
compile: False  # torch.compile the model + loss, True increases speed + decreases memory
# custom_sharded_layers: ['attention', 'mlp', 'norm', 'rope']
fsdp_cpu_offload: False

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: True

# Environment
device: cuda
dtype: bf16

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: True     # True reduces memory
